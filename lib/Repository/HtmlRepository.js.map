{"version":3,"sources":["../../src/Repository/HtmlRepository.js"],"names":["HtmlRepository","constructor","projectFolder","file","url","path","join","getProjectsHtmlFolder","name","projectsPathHtml","fs","existsSync","mkdirSync"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,cAAN,CAAqB;AAChC;;;;AAKA;;;AAGAC,EAAAA,WAAW,CAACC,aAAD,EAAwB;AAC/B,SAAKA,aAAL,GAAqBA,aAArB;AACH;AAED;;;;;AAGAC,EAAAA,IAAI,CAACC,GAAD,EAAmB;AACnB,WAAOC,cAAKC,IAAL,CAAU,KAAKC,qBAAL,EAAV,EAAwCH,GAAG,CAACI,IAAJ,GAAW,OAAnD,CAAP;AACH;AAED;;;;;;AAIAD,EAAAA,qBAAqB,GAAW;AAC5B,QAAIE,gBAAgB,GAAGJ,cAAKC,IAAL,CAAU,KAAKJ,aAAf,EAA8B,MAA9B,CAAvB;;AACA,QAAI,CAACQ,YAAGC,UAAH,CAAcF,gBAAd,CAAL,EAAsC;AAClCC,kBAAGE,SAAH,CAAaH,gBAAb;AACH;;AACD,WAAOA,gBAAP;AACH;;AA9B+B","sourcesContent":["// @flow\nimport fs from \"fs\";\nimport Url from \"../Model/Url\";\nimport path from \"path\";\n\n/**\n * Save the url html to file.\n */\nexport default class HtmlRepository {\n    /**\n     * Location to the html folder in the project.\n     */\n    projectFolder: string;\n\n    /**\n     * Build a json url repo.\n     */\n    constructor(projectFolder: string) {\n        this.projectFolder = projectFolder;\n    }\n\n    /**\n     * Gets the full path to the html file.\n     */\n    file(url: Url): string {\n        return path.join(this.getProjectsHtmlFolder(), url.name + '.html');\n    }\n\n    /**\n     * Creates the html folder in the project if it doesn't exist.\n     * @returns {string} for the html folder.\n     */\n    getProjectsHtmlFolder(): string {\n        let projectsPathHtml = path.join(this.projectFolder, 'html');\n        if (!fs.existsSync(projectsPathHtml)) {\n            fs.mkdirSync(projectsPathHtml);\n        }\n        return projectsPathHtml;\n    }\n}"],"file":"HtmlRepository.js"}