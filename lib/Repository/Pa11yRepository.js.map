{"version":3,"sources":["../../src/Repository/Pa11yRepository.js"],"names":["Pa11yRepository","constructor","option","args","test","urlsToGet","started","updated","createFolder","htmlRepository","HtmlRepository","getProjectPath","urls","filter","url","fs","existsSync","path","join","folder","name","endsWith","errorCount","progress","Progress","length","scanLocation","file","remote","fragment","currentUrl","results","a11y","jsonFile","writeFileSync","JSON","stringify","tested","update","output","filename","getSiteName","mkdirSync"],"mappings":"6FACA,oDACA,8CACA,kDACA,+DACA,2DACA,mEACA,oFACA,yD,4oBAEe,KAAMA,CAAAA,eAAgB,CAMjCC,WAAW,CAACC,MAAD,CAAiBC,IAAjB,CAA6B,CACpC,KAAKD,MAAL,CAAcA,MAAd,CACA,KAAKC,IAAL,CAAYA,IACf,CAED;;OAGMC,IAAN,CAAWC,SAAX,CAA6BC,OAA7B,CAAoEC,OAApE,CAA2G,qDACvG,KAAI,CAACC,YAAL,GACA,GAAIC,CAAAA,cAAc,CAAG,GAAIC,wBAAJ,CAAmB,KAAI,CAACP,IAAL,CAAUQ,cAAV,EAAnB,CAArB,CACA,GAAIC,CAAAA,IAAI,CAAGP,SAAS,CAACQ,MAAV,CAAiBC,GAAG,EAAI,CAC/B,MAAO,CAACC,YAAGC,UAAH,CAAcC,cAAKC,IAAL,CAAU,KAAI,CAACC,MAAf,CAAuBL,GAAG,CAACM,IAAJ,CAAW,OAAlC,CAAd,CACX,CAFU,EAERP,MAFQ,CAEDC,GAAG,EAAI,CACb,MAAO,CAACA,GAAG,CAACA,GAAJ,CAAQO,QAAR,CAAiB,MAAjB,CACX,CAJU,EAIRR,MAJQ,CAIDC,GAAG,EAAI,CACb,MAAOA,CAAAA,GAAG,CAACQ,UAAJ,CAAiB,CAC3B,CANU,CAAX,CAQA,GAAIC,CAAAA,QAAQ,CAAG,GAAIC,kBAAJ,CAAa,IAAb,CAAmBZ,IAAI,CAACa,MAAxB,CAAf,CACAnB,OAAO,CAACiB,QAAD,CAAP,CACA,IAAK,GAAIT,CAAAA,GAAT,GAAgBF,CAAAA,IAAhB,CAAsB,CAClB,GAAIc,CAAAA,YAAY,CAAGjB,cAAc,CAACkB,IAAf,CAAoBb,GAApB,CAAnB,CACA,GAAI,KAAI,CAACX,IAAL,CAAUyB,MAAd,CAAsB,CAClBF,YAAY,CAAGZ,GAAG,CAACA,GAAJ,CAAUA,GAAG,CAACe,QAChC,CACD,KAAI,CAACC,UAAL,CAAkBhB,GAAlB,CACA,KAAMiB,CAAAA,OAAO,MAAS,mBAAML,YAAN,CAAoB,KAAI,CAACxB,MAAL,CAAY8B,IAAhC,CAAtB,CACA,KAAMC,CAAAA,QAAQ,CAAGhB,cAAKC,IAAL,CAAU,KAAI,CAACC,MAAf,CAAuBL,GAAG,CAACM,IAAJ,CAAW,OAAlC,CAAjB,CACA,KAAML,aAAGmB,aAAH,CAAiBD,QAAjB,CAA2BE,IAAI,CAACC,SAAL,CAAeL,OAAf,CAA3B,CAAN,CACAjB,GAAG,CAACuB,MAAJ,CAAa,IAAb,CACAd,QAAQ,CAACe,MAAT,CAAgBxB,GAAhB,EACAP,OAAO,CAACgB,QAAD,CACV,CACD,MAAO,IAAIC,kBAAJ,CAAa,IAAb,CAAmBZ,IAAI,CAACa,MAAxB,CA1BgG,IA2B1G,CAED;;OAGAjB,YAAY,EAAG,CACX,KAAKW,MAAL,CAAcF,cAAKC,IAAL,CAAU,KAAKf,IAAL,CAAUoC,MAAV,CAAiBC,QAA3B,CAAqC,KAAKrC,IAAL,CAAUsC,WAAV,EAArC,CAA8D,MAA9D,CAAd,CACA,GAAI,CAAC1B,YAAGC,UAAH,CAAc,KAAKG,MAAnB,CAAL,CAAiC,CAC7BJ,YAAG2B,SAAH,CAAa,KAAKvB,MAAlB,CACH,CACJ,CAnDgC,C","sourcesContent":["// @flow\nimport pa11y from \"pa11y\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport Option from \"../Model/Option\";\nimport Args from \"../Model/Args\";\nimport Progress from \"../Model/Progress\";\nimport HtmlRepository from \"../Repository/HtmlRepository\";\nimport Url from \"../Model/Url\";\n\nexport default class Pa11yRepository {\n    option: Option;\n    args: Args;\n    currentUrl: Url;\n    folder: string;\n\n    constructor(option: Option, args: Args) {\n        this.option = option;\n        this.args = args;\n    }\n\n    /**\n     * Test a bunch of urls.\n     */\n    async test(urlsToGet: Url[], started: (progress: Progress) => void, updated: (progress: Progress) => void) {\n        this.createFolder();\n        let htmlRepository = new HtmlRepository(this.args.getProjectPath());\n        let urls = urlsToGet.filter(url => {\n            return !fs.existsSync(path.join(this.folder, url.name + '.json'));\n        }).filter(url => {\n            return !url.url.endsWith('.pdf')\n        }).filter(url => {\n            return url.errorCount < 3;\n        });\n\n        let progress = new Progress(null, urls.length);\n        started(progress);\n        for (let url of urls) {\n            let scanLocation = htmlRepository.file(url);\n            if (this.args.remote) {\n                scanLocation = url.url + url.fragment;\n            }\n            this.currentUrl = url;\n            const results = await pa11y(scanLocation, this.option.a11y);\n            const jsonFile = path.join(this.folder, url.name + '.json');\n            await fs.writeFileSync(jsonFile, JSON.stringify(results));\n            url.tested = true;\n            progress.update(url);\n            updated(progress);\n        }\n        return new Progress(null, urls.length);\n    }\n\n    /**\n     * Create project folder.\n     */\n    createFolder() {\n        this.folder = path.join(this.args.output.filename, this.args.getSiteName(), 'a11y');\n        if (!fs.existsSync(this.folder)) {\n            fs.mkdirSync(this.folder)\n        }\n    }\n}"],"file":"Pa11yRepository.js"}