{"version":3,"sources":["../../src/Repository/Pa11yRepository.js"],"names":["Pa11yRepository","constructor","option","args","test","urlsToGet","started","updated","createFolder","htmlRepository","HtmlRepository","getProjectPath","urls","filter","url","fs","existsSync","path","join","folder","name","endsWith","errorCount","progress","Progress","length","scanLocation","file","remote","fragment","currentUrl","results","a11y","jsonFile","writeFileSync","JSON","stringify","tested","update","output","filename","getSiteName","mkdirSync"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEe,MAAMA,eAAN,CAAsB;AAMjCC,EAAAA,WAAW,CAACC,MAAD,EAAiBC,IAAjB,EAA6B;AACpC,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACH;AAED;;;;;AAGMC,EAAAA,IAAN,CAAWC,SAAX,EAA6BC,OAA7B,EAAoEC,OAApE,EAA2G;AAAA;;AAAA;AACvG,MAAA,KAAI,CAACC,YAAL;;AACA,UAAIC,cAAc,GAAG,IAAIC,uBAAJ,CAAmB,KAAI,CAACP,IAAL,CAAUQ,cAAV,EAAnB,CAArB;AACA,UAAIC,IAAI,GAAGP,SAAS,CAACQ,MAAV,CAAiBC,GAAG,IAAI;AAC/B,eAAO,CAACC,YAAGC,UAAH,CAAcC,cAAKC,IAAL,CAAU,KAAI,CAACC,MAAf,EAAuBL,GAAG,CAACM,IAAJ,GAAW,OAAlC,CAAd,CAAR;AACH,OAFU,EAERP,MAFQ,CAEDC,GAAG,IAAI;AACb,eAAO,CAACA,GAAG,CAACA,GAAJ,CAAQO,QAAR,CAAiB,MAAjB,CAAR;AACH,OAJU,EAIRR,MAJQ,CAIDC,GAAG,IAAI;AACb,eAAOA,GAAG,CAACQ,UAAJ,GAAiB,CAAxB;AACH,OANU,CAAX;AAQA,UAAIC,QAAQ,GAAG,IAAIC,iBAAJ,CAAa,IAAb,EAAmBZ,IAAI,CAACa,MAAxB,CAAf;AACAnB,MAAAA,OAAO,CAACiB,QAAD,CAAP;;AACA,WAAK,IAAIT,GAAT,IAAgBF,IAAhB,EAAsB;AAClB,YAAIc,YAAY,GAAGjB,cAAc,CAACkB,IAAf,CAAoBb,GAApB,CAAnB;;AACA,YAAI,KAAI,CAACX,IAAL,CAAUyB,MAAd,EAAsB;AAAA,cACbC,QADa,GACDf,GADC,CACbe,QADa;AAElBH,UAAAA,YAAY,GAAGZ,GAAG,CAACA,GAAJ,IAAWe,QAAQ,GAAGA,QAAH,GAAc,EAAjC,CAAf;AACH;;AACD,QAAA,KAAI,CAACC,UAAL,GAAkBhB,GAAlB;AACA,cAAMiB,OAAO,SAAS,oBAAML,YAAN,EAAoB,KAAI,CAACxB,MAAL,CAAY8B,IAAhC,CAAtB;;AACA,cAAMC,QAAQ,GAAGhB,cAAKC,IAAL,CAAU,KAAI,CAACC,MAAf,EAAuBL,GAAG,CAACM,IAAJ,GAAW,OAAlC,CAAjB;;AACA,cAAML,YAAGmB,aAAH,CAAiBD,QAAjB,EAA2BE,IAAI,CAACC,SAAL,CAAeL,OAAf,CAA3B,CAAN;AACAjB,QAAAA,GAAG,CAACuB,MAAJ,GAAa,IAAb;AACAd,QAAAA,QAAQ,CAACe,MAAT,CAAgBxB,GAAhB;AACAP,QAAAA,OAAO,CAACgB,QAAD,CAAP;AACH;;AACD,aAAO,IAAIC,iBAAJ,CAAa,IAAb,EAAmBZ,IAAI,CAACa,MAAxB,CAAP;AA3BuG;AA4B1G;AAED;;;;;AAGAjB,EAAAA,YAAY,GAAG;AACX,SAAKW,MAAL,GAAcF,cAAKC,IAAL,CAAU,KAAKf,IAAL,CAAUoC,MAAV,CAAiBC,QAA3B,EAAqC,KAAKrC,IAAL,CAAUsC,WAAV,EAArC,EAA8D,MAA9D,CAAd;;AACA,QAAI,CAAC1B,YAAGC,UAAH,CAAc,KAAKG,MAAnB,CAAL,EAAiC;AAC7BJ,kBAAG2B,SAAH,CAAa,KAAKvB,MAAlB;AACH;AACJ;;AApDgC","sourcesContent":["// @flow\nimport pa11y from \"pa11y\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport Option from \"../Model/Option\";\nimport Args from \"../Model/Args\";\nimport Progress from \"../Model/Progress\";\nimport HtmlRepository from \"../Repository/HtmlRepository\";\nimport Url from \"../Model/Url\";\n\nexport default class Pa11yRepository {\n    option: Option;\n    args: Args;\n    currentUrl: Url;\n    folder: string;\n\n    constructor(option: Option, args: Args) {\n        this.option = option;\n        this.args = args;\n    }\n\n    /**\n     * Test a bunch of urls.\n     */\n    async test(urlsToGet: Url[], started: (progress: Progress) => void, updated: (progress: Progress) => void) {\n        this.createFolder();\n        let htmlRepository = new HtmlRepository(this.args.getProjectPath());\n        let urls = urlsToGet.filter(url => {\n            return !fs.existsSync(path.join(this.folder, url.name + '.json'));\n        }).filter(url => {\n            return !url.url.endsWith('.pdf')\n        }).filter(url => {\n            return url.errorCount < 3;\n        });\n\n        let progress = new Progress(null, urls.length);\n        started(progress);\n        for (let url of urls) {\n            let scanLocation = htmlRepository.file(url);\n            if (this.args.remote) {\n                let {fragment} = url;\n                scanLocation = url.url + (fragment ? fragment : '');\n            }\n            this.currentUrl = url;\n            const results = await pa11y(scanLocation, this.option.a11y);\n            const jsonFile = path.join(this.folder, url.name + '.json');\n            await fs.writeFileSync(jsonFile, JSON.stringify(results));\n            url.tested = true;\n            progress.update(url);\n            updated(progress);\n        }\n        return new Progress(null, urls.length);\n    }\n\n    /**\n     * Create project folder.\n     */\n    createFolder() {\n        this.folder = path.join(this.args.output.filename, this.args.getSiteName(), 'a11y');\n        if (!fs.existsSync(this.folder)) {\n            fs.mkdirSync(this.folder)\n        }\n    }\n}"],"file":"Pa11yRepository.js"}